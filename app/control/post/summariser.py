import logging

from app.exceptions.exception import LogicError

log = logging.getLogger(__name__)


def post_process(topic: str, content: str) -> dict[str, str]:
    """Processes the output of the summariser and returns a dictionary containing the topic-summary pairs.
    
    Args:
        topic (str): The topic of the summary.
        content (str): The content of the summary.
        llm_type (LLMType): The type of LLM model used to generate the summary. This is important as certain tokens are added to the output by specific LLM models and need to be removed.
    """
    try:
        if not isinstance(topic, str):
            raise TypeError(f"Topic is not a string: {topic}")
        if not isinstance(content, str):
            raise TypeError(f"Content is not a string: {content}")
        _reject_unlikely_topics(topic=topic)
        return {topic: content}
    except (TypeError, ValueError) as e:
        log.error(f"Logic error while post-processing summary: {e}")
        raise LogicError(message=str(e))
    except Exception as e:
        log.error(f"Unexpected error while post-processing summary: {e}")
        raise e


def _reject_unlikely_topics(topic: str):
    """Throws an error if the topic is unlikely to be valid/of good quality.

    The observation is that most valid topics have more than one word. One-word topics generated by LLM tend to be things like "Issue", "Problem", "Solution", etc. that are not what we want.
    
    Args:
        topic (str): the topic-content dictionary to be checked.
    """
    
    if len(topic.split(" ")) <= 1:
        raise ValueError(f"Topic '{topic}' is unlikely to be a valid topic.")